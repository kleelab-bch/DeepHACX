# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=250)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_250_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=200)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_250_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=150)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_250_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=150)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_150_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=250)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_250_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=250)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_250_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=200)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_200_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_motoch\\Pooled_retraction_analysis")
library(Seurat)
library(igraph)
# library(sp)
#library(pheatmap)
#library(viridis)
#library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "symbolic.feat.data.ratio.4.alpha.size.4dist_acf_for_all_factors.mat"
data_mat <-readMat(filename)
dist <- data_mat$dist.acf
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=300)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("DMSO_AICAR_CC_K_300_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_Bleb\\Pooled_retraction_analysis\\Sub_clusterIV")
library(Seurat)
library(igraph)
# library(sp)
library(pheatmap)
library(Rtsne)
library(viridis)
library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# ------------------------------------------------------------------------------------------------------------
# 1. Load the distance matrix
library(plyr)
filename <- "dmaxpool_clIII_euclidean_dist.mat"
data_mat <-readMat(filename)
dist <- data_mat$euclidean.dist
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=43)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("none_bleb_clIII_K_43_community.mat", cluster_label = as.vector(cluster))
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_Bleb\\Pooled_retraction_analysis\\Sub_clusterIV")
library(Seurat)
library(igraph)
# library(sp)
library(pheatmap)
library(Rtsne)
library(viridis)
library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# 1. Load the distance matrix
library(plyr)
filename <- "dmaxpool_clIII_euclidean_dist.mat"
data_mat <-readMat(filename)
dist <- data_mat$euclidean.dist
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_Bleb\\Pooled_retraction_analysis\\Sub_clusteringIV")
library(Seurat)
library(igraph)
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_Bleb\\Pooled_retraction_analysis\\Sub_clusteringIV")
library(Seurat)
library(igraph)
library(Seurat)
setwd("\\\\research.wpi.edu\\leelab\\Chauncey\\Projects\\paper4_Bleb\\Pooled_retraction_analysis\\Sub_clusteringIV")
library(Seurat)
library(igraph)
# library(sp)
library(pheatmap)
library(Rtsne)
library(viridis)
library(RColorBrewer)
# Install pagoda2
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("GO.db", "org.Hs.eg.db", "org.Mm.eg.db", "pcaMethods"), suppressUpdates=TRUE)
library(devtools)
# install_github("igraph/rigraph") # Don't install with install.packages()
# install_github("jkrijthe/Rtsne",ref="openmp")
# install.packages(c("Cairo","urltools"))
# Sys.setenv("NMSLIB_PATH"="/path/to/nmslib-1.6/")
# install_github("hms-dbmi/pagoda2")
# library('pagoda2')
library(igraph)
# install.packages("loe")
library(loe)
require(R.matlab)
# 1. Load the distance matrix
library(plyr)
filename <- "dmaxpool_clIII_euclidean_dist.mat"
data_mat <-readMat(filename)
dist <- data_mat$euclidean.dist
#cc_sc <- readRDS("SAX_community_clusters.Rds")
#dat_dist <- as.matrix(ldply(symbolic.feat.data.ratio.4.alpha.size.4))
dat_dist <- as.matrix(dist)
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=43)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("none_bleb_clIII_K_43_community.mat", cluster_label = as.vector(cluster))
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=30)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("none_bleb_clIII_K_30_community.mat", cluster_label = as.vector(cluster))
# 2. Make a KNN graph based on euclidean distance
dat_knn <- make.kNNG(dat_dist, k=20)
dim(dat_knn)
# 3. Calculate adjacency matrix
g_adj  <- graph.adjacency(dat_knn, mode="undirected", weighted=TRUE)
# g <- graph_from_adjacency_matrix(g_adj, weighted=FALSE)
# 4. Community detection on adjacency matirx
imc <- cluster_infomap(g_adj)
# imc <- cluster_louvain(g_adj) # seurat uses this one
membership(imc)
communities(imc)
#plot(imc, g_adj)
cluster <- as.factor(membership(imc))
writeMat("none_bleb_clIII_K_20_community.mat", cluster_label = as.vector(cluster))
